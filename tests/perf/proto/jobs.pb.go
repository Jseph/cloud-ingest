// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tests/perf/proto/jobs.proto

package pb_perf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Possible validators to use.
type JobConfig_TestRunValidator int32

const (
	JobConfig_METADATA_VALIDATOR        JobConfig_TestRunValidator = 0
	JobConfig_DEEP_COMPARISON_VALIDATOR JobConfig_TestRunValidator = 1
)

var JobConfig_TestRunValidator_name = map[int32]string{
	0: "METADATA_VALIDATOR",
	1: "DEEP_COMPARISON_VALIDATOR",
}
var JobConfig_TestRunValidator_value = map[string]int32{
	"METADATA_VALIDATOR":        0,
	"DEEP_COMPARISON_VALIDATOR": 1,
}

func (x JobConfig_TestRunValidator) String() string {
	return proto.EnumName(JobConfig_TestRunValidator_name, int32(x))
}
func (JobConfig_TestRunValidator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0}
}

// A job config for the load testing.
type JobConfig struct {
	// On premise source directory.
	SourceDir string `protobuf:"bytes,1,opt,name=sourceDir" json:"sourceDir,omitempty"`
	// GCS bucket, will create a random bucket if empty.
	DestinationBucket string `protobuf:"bytes,2,opt,name=destinationBucket" json:"destinationBucket,omitempty"`
	// Validators for testing. An empty list of validators will always result in a 'valid' result.
	Validators []JobConfig_TestRunValidator `protobuf:"varint,3,rep,packed,name=validators,enum=pb_perf.JobConfig_TestRunValidator" json:"validators,omitempty"`
}

func (m *JobConfig) Reset()                    { *m = JobConfig{} }
func (m *JobConfig) String() string            { return proto.CompactTextString(m) }
func (*JobConfig) ProtoMessage()               {}
func (*JobConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *JobConfig) GetSourceDir() string {
	if m != nil {
		return m.SourceDir
	}
	return ""
}

func (m *JobConfig) GetDestinationBucket() string {
	if m != nil {
		return m.DestinationBucket
	}
	return ""
}

func (m *JobConfig) GetValidators() []JobConfig_TestRunValidator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type LoadTestingConfiguration struct {
	// Friendly name of the load testing configuration. Used to identify the job
	// configs created in the system.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// List of job configs for the load test.
	Config []*JobConfig `protobuf:"bytes,2,rep,name=config" json:"config,omitempty"`
}

func (m *LoadTestingConfiguration) Reset()                    { *m = LoadTestingConfiguration{} }
func (m *LoadTestingConfiguration) String() string            { return proto.CompactTextString(m) }
func (*LoadTestingConfiguration) ProtoMessage()               {}
func (*LoadTestingConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *LoadTestingConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoadTestingConfiguration) GetConfig() []*JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*JobConfig)(nil), "pb_perf.JobConfig")
	proto.RegisterType((*LoadTestingConfiguration)(nil), "pb_perf.LoadTestingConfiguration")
	proto.RegisterEnum("pb_perf.JobConfig_TestRunValidator", JobConfig_TestRunValidator_name, JobConfig_TestRunValidator_value)
}

func init() { proto.RegisterFile("tests/perf/proto/jobs.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x5d, 0x4b, 0xf3, 0x30,
	0x18, 0x86, 0xdf, 0xae, 0x2f, 0x93, 0x3e, 0x82, 0xcc, 0xe7, 0x40, 0x2a, 0x2a, 0x94, 0x7a, 0x52,
	0x44, 0x5a, 0x98, 0xbf, 0x20, 0xb6, 0x3d, 0xa8, 0x6c, 0x76, 0xc4, 0xb2, 0x03, 0x4f, 0x4a, 0x3f,
	0xb2, 0x51, 0x3f, 0x92, 0x92, 0xa4, 0xfe, 0x65, 0xff, 0x86, 0x18, 0xab, 0x0e, 0x77, 0x76, 0x93,
	0xeb, 0x0a, 0xf7, 0x9d, 0xc0, 0x99, 0x66, 0x4a, 0xab, 0xa8, 0x67, 0x72, 0x13, 0xf5, 0x52, 0x68,
	0x11, 0x3d, 0x89, 0x5a, 0x85, 0x26, 0xe2, 0x41, 0x5f, 0x97, 0x9f, 0xc4, 0x7f, 0xb7, 0xc0, 0xb9,
	0x13, 0x75, 0x2c, 0xf8, 0xa6, 0xdb, 0xe2, 0x39, 0x38, 0x4a, 0x0c, 0xb2, 0x61, 0x49, 0x27, 0x5d,
	0xcb, 0xb3, 0x02, 0x87, 0xfe, 0x1e, 0xe0, 0x35, 0x1c, 0xb7, 0x4c, 0xe9, 0x8e, 0x57, 0xba, 0x13,
	0xfc, 0x76, 0x68, 0x9e, 0x99, 0x76, 0x27, 0xc6, 0xda, 0x07, 0x18, 0x03, 0xbc, 0x55, 0x2f, 0x5d,
	0x5b, 0x69, 0x21, 0x95, 0x6b, 0x7b, 0x76, 0x70, 0x34, 0xbf, 0x0c, 0xc7, 0xde, 0xf0, 0xa7, 0x33,
	0x2c, 0x98, 0xd2, 0x74, 0xe0, 0xeb, 0x6f, 0x97, 0xee, 0x5c, 0xf3, 0x33, 0x98, 0xfd, 0xe5, 0x78,
	0x02, 0xb8, 0x4c, 0x0b, 0x92, 0x90, 0x82, 0x94, 0x6b, 0xb2, 0xc8, 0x12, 0x52, 0xe4, 0x74, 0xf6,
	0x0f, 0x2f, 0xe0, 0x34, 0x49, 0xd3, 0x55, 0x19, 0xe7, 0xcb, 0x15, 0xa1, 0xd9, 0x43, 0x7e, 0xbf,
	0x83, 0x2d, 0xff, 0x11, 0xdc, 0x85, 0xa8, 0xda, 0xc2, 0x0c, 0xdd, 0x7e, 0x95, 0x0f, 0xd2, 0x2c,
	0x46, 0x84, 0xff, 0xbc, 0x7a, 0x65, 0xe3, 0x93, 0x4d, 0xc6, 0x2b, 0x98, 0x36, 0x46, 0x72, 0x27,
	0x9e, 0x1d, 0x1c, 0xce, 0x71, 0x7f, 0x3b, 0x1d, 0x8d, 0x7a, 0x6a, 0x7e, 0xf5, 0xe6, 0x23, 0x00,
	0x00, 0xff, 0xff, 0xfe, 0x5d, 0x99, 0xd0, 0x74, 0x01, 0x00, 0x00,
}
