// Code generated by MockGen. DO NOT EDIT.
// Source: jobservice.go

// Package perf is a generated GoMock package.
package perf

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockJobService is a mock of JobService interface
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// CreateJobConfig mocks base method
func (m *MockJobService) CreateJobConfig(configId, sourceDir, destinationBucket string) error {
	ret := m.ctrl.Call(m, "CreateJobConfig", configId, sourceDir, destinationBucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobConfig indicates an expected call of CreateJobConfig
func (mr *MockJobServiceMockRecorder) CreateJobConfig(configId, sourceDir, destinationBucket interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobConfig", reflect.TypeOf((*MockJobService)(nil).CreateJobConfig), configId, sourceDir, destinationBucket)
}

// GetJobStatus mocks base method
func (m *MockJobService) GetJobStatus(configId, runId string) (*JobRunStatus, error) {
	ret := m.ctrl.Call(m, "GetJobStatus", configId, runId)
	ret0, _ := ret[0].(*JobRunStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStatus indicates an expected call of GetJobStatus
func (mr *MockJobServiceMockRecorder) GetJobStatus(configId, runId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStatus", reflect.TypeOf((*MockJobService)(nil).GetJobStatus), configId, runId)
}
