syntax = "proto3";

package google.storagetransfer.v1;
option go_package = "transfer_go_package";

import "github.com/golang/protobuf/ptypes/duration/duration.proto";
import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "googleapis/google/rpc/code.proto";

// (-- See doc/overview.md for details. --)

// Storage Transfer Service and its protos.

// Transfers data between between Google Cloud Storage buckets or from a data
// source external to Google to a Cloud Storage bucket.
service StorageTransferService {
  // Reports progress for a specific task within a transfer operation.
  rpc ReportTaskProgress(ReportTaskProgressRequest)
      returns (ReportTaskProgressResponse) {}
  rpc GetGoogleServiceAccount(GetGoogleServiceAccountRequest) returns
    (GoogleServiceAccount) {
  }
}

message GetGoogleServiceAccountRequest {
  // The ID of the Google Cloud Platform Console project that the Google service
  // account is associated with.
  string project_id = 1;  // Required.
}

message GoogleServiceAccount {
  string account_email = 1;  // Required.
}

// Request passed to ReportTaskProgress.
message ReportTaskProgressRequest {
  // Required. The name which uniquely identifies this task within the scope of
  // its associated transfer operation. This value is generated by the service
  // and passed to workers via the TaskSpec upon task assignment.
  //
  // If a task with this UID already exists but is leased to a different worker,
  // the request will be rejected by the service with an `INVALID_ARGUMENT`
  // error.
  string name = 1;

  // Required. The ID of the Google Cloud Platform Console project that owns the
  // transfer operation.
  string project_id = 2;

  // Required. Name of the transfer operation with which this task is
  // associated.
  string transfer_operation_name = 3;

  // Required. The ID of the worker which is reporting progress for this task.
  //
  // Each worker is responsible for presenting an identifier that is different
  // from the identifier of other workers performing tasks for the same transfer
  // operation.
  string worker_id = 4;

  // Required. Unique identifier which is returned by the service in a
  // successful ReportTaskProgressResponse. The worker executing this task
  // is expected to save the lease_token_id from the previous response to
  // send the same value in the new ReportTaskProgressRequest.
  //
  // For the zeroth checkpoint of a newly-received task, the value which should
  // be used for this field in the ReportTaskProgressRequest is located in the
  // TaskSpec received by the worker.
  //
  // Note that a caller specifying an invalid lease_token_id will receive an
  // `INVALID_ARGUMENT` error. If a worker "loses" a lease_token_id (e.g.,
  // due to a machine dying without the ability to persist the token and
  // then restarting), the worker will be unable to update the task, and the
  // task will be reassigned once the old lease held by the worker expires.
  string lease_token_id = 5;

  // Required. The current/updated status of this task, from the perspective of
  // the worker which is calling ReportTaskProgress.
  TaskStatus task_status = 6;

  // The current/updated version of the TaskSpec for the *currently executing*
  // task - e.g., this may include an updated serialization token, or a new
  // resumable upload ID for a write to GCS if a previous upload token is
  // invalidated, or any other information required for a worker (potentially
  // executing on a different machine than the worker which sends this request)
  // to continue executing this task.
  //
  // Note: If specified, then this *overwrites* the existing TaskSpec, so *all*
  // information must be included, even if the value of the field has not
  // changed.
  TaskSpec updated_task_spec = 7;

  // Key-value map of resource types and values requested by the client.
  // The response may specify a smaller value, or it may evict the task - i.e.,
  // the request is not guaranteed to be fulfilled just because the response
  // is a "200 OK" over HTTP.
  //
  // Negative values are not supported and will return `INVALID_ARGUMENT`.
  //
  // No more than 100 resources may be specified in a single request.
  repeated Resource resource_requests = 8;

  // Key-value map of counter names and values for this Task.
  //
  // Note that these correspond to the *current* values of the counters,
  // regardless of how much progress was made since the last checkpoint.
  //
  // Negative values are not supported and will return `INVALID_ARGUMENT`.
  //
  // No more than 100 counters may be specified in a single request.
  repeated Counter counters = 9;

  // Errors encountered during the job; one ErrorSummary per unique
  // ErrorSummary.error_code value.
  //
  // Note that this represents only the errors which have been encountered
  // by the calling worker since the last ReportTaskProgress call.
  //
  // No more than 100 error summaries may be specified in a single request.
  repeated ErrorSummary error_summaries = 10;

  // Only applicable if the task has failed during execution on the worker:
  // if true, this flag, determines whether or not the failure will be
  // considered retriable.
  //
  // A Task which repeatedly encounters retriable errors will be reassigned for
  // 10 attempts.
  bool encountered_retriable_failure = 11;

  // User-facing log entries to be propagated to the user-owned log bucket,
  // if specified.
  //
  // No more than 100 log entries may be specified in a single request.
  repeated LogEntry log_entries = 12;

  // New tasks to be added to this transfer operation. These will be persisted
  // by the service and assigned back to this worker pool in the future.
  //
  // No more than 1000 generated tasks may be specified in a single request.
  repeated TaskSpec generated_task_specs = 13;
}

// Response returned by ReportTaskProgressRequest.
message ReportTaskProgressResponse {
  // Required. Unique identifier which will be modified by the service every
  // time a lease is granted in response to a successful ReportTaskProgress call
  // for a task which is still in progress on the calling worker.
  string lease_token_id = 1;

  // True if and only if the task should be evicted from the current worker.
  //
  // Note that the HTTP response code can still be "200 OK" even if the task
  // is evicted, indicating that the progress reported in the request was
  // recorded successfully for the task.
  bool evict_task = 2;

  // Duration by which the task lease was extended.
  //
  // This value will not be specified if the task_status specified in the
  // request corresponds to a terminal state.
  google.protobuf.Duration new_task_lease_expiration = 3;

  // Resources granted to the Worker to perform this Task. Note that the values
  // specified may be smaller than those specified in the
  // [google.storagetransfer.v1.StorageTransferService.ReportTaskProgressRequest.resource_request][]
  // based on available resources, but every Resource from the request will
  // be represented in the response also with *some* value.
  //
  // The ordering of the keys in this field is not necessarily the same
  // as the ordering of the keys in the request.
  repeated Resource resource_grants = 4;
}

// Worker-specified task status to be set in ReportTaskProgressRequests.
enum TaskStatus {
  // Invalid, should never be used.
  TASK_STATUS_UNSPECIFIED = 0;

  // Task has not yet terminated.
  IN_PROGRESS = 1;

  // Task has terminated without any failures.
  COMPLETED = 2;

  // Task failed with a retriable error, and it is eligible to be reassigned
  // for retries. Note that no single task may be
  // retried more than 10 times.
  RETRIABLE_FAILURE = 3;

  // Task failed with a non-retriable error. Such tasks will not be reassigned
  // for retries.
  NONRETRIABLE_FAILURE = 4;

  // Task can no longer be completed as originally specified (e.g., because
  // one or more required resources no longer exist).
  OBSOLETE = 5;
}

// Contains log entry information for a task.
//
// Note that this feature is currently not implemented; once it is, the logged
// data will eventually (SLO TBD) be dumped into the user's GCS bucket.
message LogEntry {
  // Required. The ID of the Google Cloud Platform Console project that owns the
  // transfer operation.
  string project_id = 1;

  // Required. Name of the transfer job with which this task is associated.
  string transfer_job_name = 2;

  // Required. Name of the transfer operation with which this task is
  // associated.
  string transfer_operation_name = 3;

  // Required. Name of the task with which this task is associated.
  string task_name = 4;

  // Timestamp at which the task was first created, from the persective of
  // Storage Transfer Service.
  google.protobuf.Timestamp create_time = 5;

  // Current status of the task.
  TaskStatus current_status = 6;

  // Previous status of the task.
  TaskStatus previous_status = 7;

  // Message which represents the ultimate reason for which this task failed
  // terminally (if applicable).
  //
  // The maximum length of this field is 1024 characters.
  string failure_message = 8;

  // Current values of counters associated with this specific task.
  // No more than 100 counters may be specified in a single log entry.
  repeated Counter counters = 9;

  // Errors encountered during the task's execution; one ErrorSummary per unique
  // ErrorSummary.error_code value.
  repeated ErrorSummary error_summaries = 10;
}

// Worker-specified task definition to be used when generating new tasks
// via the ReportTaskProgress API.
message TaskSpec {
  // The name which uniquely identifies this task within the scope of its
  // associated transfer operation. This value is generated by the service.
  //
  // Note that this field will be ignored if specified by workers when
  // generating new tasks or when updating the spec of a task for which this
  // worker currently holds the lease; it is only used for new task assignment.
  string name = 1;

  // Required. Task type which maps this task to a specific assignment queue.
  //
  // The maximum length of this field is 1024 characters.
  string task_type = 2;

  // Required. The ID of the Google Cloud Platform Console project that owns the
  // transfer operation.
  string project_id = 5;

  // Required. Name of the transfer operation with which this task is
  // associated.
  string transfer_operation_name = 6;

  // This is the lease token ID which should be specified in the
  // first ReportTaskProgressRequest sent by the worker for a newly-assigned
  // task. This value is generated by the service upon creation of new tasks
  // via the ReportTaskProgress API.
  //
  // Note that this field will be ignored if specified by workers when
  // generating new tasks or when updating the spec of a task for which this
  // worker currently holds the lease; it is only used for new task assignment.
  string lease_token_id = 3;

  // Required. Properties of the task which will be used by workers to execute
  // it later. At least one TaskProperty must be specified for every task, and
  // no task may have more than 100 properties.
  //
  // For example, properties could include the name of a bucket and object,
  // precondition values (such as generation, metageneration, etc.), a maximum
  // number of retries allowed for this task, continuation tokens, etc. - in
  // short, any information which is needed for workers to perform this task.
  repeated TaskProperty task_properties = 4;
}

// Key-value pair of properties for a single task, corresponding to an
// arbitrary worker-specified unit of work.
message TaskProperty {
  // Required. Note: The maximum length of this field is 1024 characters.
  string name = 1;

  // Required. Note: The maximum length of this field is 1024 characters.
  string value = 2;
}

// Key-value pair of the resource type to be specified in
// ReportTaskProgressRequests, where the value represents the amount of that
// resource needed in order to perform the next unit of work (i.e., before
// calling the ReportTaskProgress API again).
message Resource {
  // Required. Client-specified name of resource.
  // Note: The maximum length of this field is 1024 characters.
  string name = 1;

  // Required. Quantity of specified resource.
  int64 value = 2;
}

// Key-value pair used to represent the current value of a counter corresponding
// to the given name.
message Counter {
  // Required. Client-specified counter name.
  // Note: The maximum length of this field is 1024 characters.
  string name = 1;

  // Required. Value associated with counter with respect to the current state
  // of a Task.
  int64 value = 2;
}

// An entry describing an error that has occurred.
message ErrorLogEntry {
  // A URL that refers to the target (a data source, a data sink,
  // or an object) with which the error is associated.
  string url = 1;  // Required.

  // A list of messages that carry the error details.
  repeated string error_details = 3;
}

// A summary of errors by error code, plus a count and sample error log
// entries.
message ErrorSummary {
  google.rpc.Code error_code = 1;  // Required.

  // Count of this type of error.
  int64 error_count = 2;  // Required.

  // Error samples.
  repeated ErrorLogEntry error_log_entries = 3;
}

