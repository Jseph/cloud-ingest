// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pulse.proto

package pulse_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// This message allows the DCP to determine if each agent is alive or dead.
type Msg struct {
	AgentId              *AgentId `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Frequency            int32    `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	AgentVersion         string   `protobuf:"bytes,3,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c067e3d82b299225, []int{0}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetAgentId() *AgentId {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Msg) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Msg) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

// This message stores a unique identifier for each agent.
// The DCP can use this to separate each agent and monitor future behaviors.
type AgentId struct {
	HostName             string   `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	ProcessId            string   `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgentId) Reset()         { *m = AgentId{} }
func (m *AgentId) String() string { return proto.CompactTextString(m) }
func (*AgentId) ProtoMessage()    {}
func (*AgentId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c067e3d82b299225, []int{1}
}

func (m *AgentId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentId.Unmarshal(m, b)
}
func (m *AgentId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentId.Marshal(b, m, deterministic)
}
func (m *AgentId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentId.Merge(m, src)
}
func (m *AgentId) XXX_Size() int {
	return xxx_messageInfo_AgentId.Size(m)
}
func (m *AgentId) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentId.DiscardUnknown(m)
}

var xxx_messageInfo_AgentId proto.InternalMessageInfo

func (m *AgentId) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *AgentId) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func init() {
	proto.RegisterType((*Msg)(nil), "cloud_ingest_pulse.Msg")
	proto.RegisterType((*AgentId)(nil), "cloud_ingest_pulse.AgentId")
}

func init() { proto.RegisterFile("pulse.proto", fileDescriptor_c067e3d82b299225) }

var fileDescriptor_c067e3d82b299225 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xcd, 0x29,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0xce, 0xc9, 0x2f, 0x4d, 0x89, 0xcf,
	0xcc, 0x4b, 0x4f, 0x2d, 0x2e, 0x89, 0x07, 0xcb, 0x28, 0x35, 0x30, 0x72, 0x31, 0xfb, 0x16, 0xa7,
	0x0b, 0x99, 0x71, 0x71, 0x24, 0xa6, 0xa7, 0xe6, 0x95, 0xc4, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x1b, 0x49, 0xeb, 0x61, 0x2a, 0xd7, 0x73, 0x04, 0xa9, 0xf1, 0x4c, 0x09, 0x62, 0x4f,
	0x84, 0x30, 0x84, 0x64, 0xb8, 0x38, 0xd3, 0x8a, 0x52, 0x0b, 0x4b, 0x53, 0xf3, 0x92, 0x2b, 0x25,
	0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0x10, 0x02, 0x42, 0xca, 0x5c, 0xbc, 0x10, 0x53, 0xcb, 0x52,
	0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x24, 0x98, 0x15, 0x18, 0x35, 0x38, 0x83, 0x78, 0xc0, 0x82, 0x61,
	0x10, 0x31, 0x25, 0x57, 0x2e, 0x76, 0xa8, 0xb1, 0x42, 0xd2, 0x5c, 0x9c, 0x19, 0xf9, 0xc5, 0x25,
	0xf1, 0x79, 0x89, 0xb9, 0xa9, 0x60, 0x67, 0x70, 0x06, 0x71, 0x80, 0x04, 0xfc, 0x12, 0x73, 0x53,
	0x85, 0x64, 0xb9, 0xb8, 0x0a, 0x8a, 0xf2, 0x93, 0x53, 0x8b, 0x8b, 0x41, 0x8e, 0x64, 0x02, 0xcb,
	0x72, 0x42, 0x45, 0x3c, 0x53, 0x9c, 0x04, 0xa2, 0xf8, 0xc0, 0x6e, 0x8c, 0x4f, 0xcf, 0x8f, 0x07,
	0xfb, 0x37, 0x89, 0x0d, 0x4c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xe9, 0x0d, 0x3a,
	0x05, 0x01, 0x00, 0x00,
}
