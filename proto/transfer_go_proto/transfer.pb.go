// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transfer.proto

package transfer_go_package

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	code "google.golang.org/genproto/googleapis/rpc/code"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Worker-specified task status to be set in ReportTaskProgressRequests.
type TaskStatus int32

const (
	// Invalid, should never be used.
	TaskStatus_TASK_STATUS_UNSPECIFIED TaskStatus = 0
	// Task has not yet terminated.
	TaskStatus_IN_PROGRESS TaskStatus = 1
	// Task has terminated without any failures.
	TaskStatus_COMPLETED TaskStatus = 2
	// Task failed with a retriable error, and it is eligible to be reassigned
	// for retries. Note that no single task may be
	// retried more than 10 times.
	TaskStatus_RETRIABLE_FAILURE TaskStatus = 3
	// Task failed with a non-retriable error. Such tasks will not be reassigned
	// for retries.
	TaskStatus_NONRETRIABLE_FAILURE TaskStatus = 4
	// Task can no longer be completed as originally specified (e.g., because
	// one or more required resources no longer exist).
	TaskStatus_OBSOLETE TaskStatus = 5
)

var TaskStatus_name = map[int32]string{
	0: "TASK_STATUS_UNSPECIFIED",
	1: "IN_PROGRESS",
	2: "COMPLETED",
	3: "RETRIABLE_FAILURE",
	4: "NONRETRIABLE_FAILURE",
	5: "OBSOLETE",
}

var TaskStatus_value = map[string]int32{
	"TASK_STATUS_UNSPECIFIED": 0,
	"IN_PROGRESS":             1,
	"COMPLETED":               2,
	"RETRIABLE_FAILURE":       3,
	"NONRETRIABLE_FAILURE":    4,
	"OBSOLETE":                5,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}

func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{0}
}

type GetGoogleServiceAccountRequest struct {
	// The ID of the Google Cloud Platform Console project that the Google service
	// account is associated with.
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGoogleServiceAccountRequest) Reset()         { *m = GetGoogleServiceAccountRequest{} }
func (m *GetGoogleServiceAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetGoogleServiceAccountRequest) ProtoMessage()    {}
func (*GetGoogleServiceAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{0}
}

func (m *GetGoogleServiceAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGoogleServiceAccountRequest.Unmarshal(m, b)
}
func (m *GetGoogleServiceAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGoogleServiceAccountRequest.Marshal(b, m, deterministic)
}
func (m *GetGoogleServiceAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGoogleServiceAccountRequest.Merge(m, src)
}
func (m *GetGoogleServiceAccountRequest) XXX_Size() int {
	return xxx_messageInfo_GetGoogleServiceAccountRequest.Size(m)
}
func (m *GetGoogleServiceAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGoogleServiceAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGoogleServiceAccountRequest proto.InternalMessageInfo

func (m *GetGoogleServiceAccountRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type GoogleServiceAccount struct {
	AccountEmail         string   `protobuf:"bytes,1,opt,name=account_email,json=accountEmail,proto3" json:"account_email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoogleServiceAccount) Reset()         { *m = GoogleServiceAccount{} }
func (m *GoogleServiceAccount) String() string { return proto.CompactTextString(m) }
func (*GoogleServiceAccount) ProtoMessage()    {}
func (*GoogleServiceAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{1}
}

func (m *GoogleServiceAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleServiceAccount.Unmarshal(m, b)
}
func (m *GoogleServiceAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleServiceAccount.Marshal(b, m, deterministic)
}
func (m *GoogleServiceAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleServiceAccount.Merge(m, src)
}
func (m *GoogleServiceAccount) XXX_Size() int {
	return xxx_messageInfo_GoogleServiceAccount.Size(m)
}
func (m *GoogleServiceAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleServiceAccount.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleServiceAccount proto.InternalMessageInfo

func (m *GoogleServiceAccount) GetAccountEmail() string {
	if m != nil {
		return m.AccountEmail
	}
	return ""
}

// Request passed to ReportTaskProgress.
type ReportTaskProgressRequest struct {
	// Required. The name which uniquely identifies this task within the scope of
	// its associated transfer operation. This value is generated by the service
	// and passed to workers via the TaskSpec upon task assignment.
	//
	// If a task with this UID already exists but is leased to a different worker,
	// the request will be rejected by the service with an `INVALID_ARGUMENT`
	// error.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The ID of the Google Cloud Platform Console project that owns the
	// transfer operation.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Name of the transfer operation with which this task is
	// associated.
	TransferOperationName string `protobuf:"bytes,3,opt,name=transfer_operation_name,json=transferOperationName,proto3" json:"transfer_operation_name,omitempty"`
	// Required. The ID of the worker which is reporting progress for this task.
	//
	// Each worker is responsible for presenting an identifier that is different
	// from the identifier of other workers performing tasks for the same transfer
	// operation.
	WorkerId string `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Required. Unique identifier which is returned by the service in a
	// successful ReportTaskProgressResponse. The worker executing this task
	// is expected to save the lease_token_id from the previous response to
	// send the same value in the new ReportTaskProgressRequest.
	//
	// For the zeroth checkpoint of a newly-received task, the value which should
	// be used for this field in the ReportTaskProgressRequest is located in the
	// TaskSpec received by the worker.
	//
	// Note that a caller specifying an invalid lease_token_id will receive an
	// `INVALID_ARGUMENT` error. If a worker "loses" a lease_token_id (e.g.,
	// due to a machine dying without the ability to persist the token and
	// then restarting), the worker will be unable to update the task, and the
	// task will be reassigned once the old lease held by the worker expires.
	LeaseTokenId string `protobuf:"bytes,5,opt,name=lease_token_id,json=leaseTokenId,proto3" json:"lease_token_id,omitempty"`
	// Required. The current/updated status of this task, from the perspective of
	// the worker which is calling ReportTaskProgress.
	TaskStatus TaskStatus `protobuf:"varint,6,opt,name=task_status,json=taskStatus,proto3,enum=google.storagetransfer.v1.TaskStatus" json:"task_status,omitempty"`
	// The current/updated version of the TaskSpec for the *currently executing*
	// task - e.g., this may include an updated serialization token, or a new
	// resumable upload ID for a write to GCS if a previous upload token is
	// invalidated, or any other information required for a worker (potentially
	// executing on a different machine than the worker which sends this request)
	// to continue executing this task.
	//
	// Note: If specified, then this *overwrites* the existing TaskSpec, so *all*
	// information must be included, even if the value of the field has not
	// changed.
	UpdatedTaskSpec *TaskSpec `protobuf:"bytes,7,opt,name=updated_task_spec,json=updatedTaskSpec,proto3" json:"updated_task_spec,omitempty"`
	// Key-value map of resource types and values requested by the client.
	// The response may specify a smaller value, or it may evict the task - i.e.,
	// the request is not guaranteed to be fulfilled just because the response
	// is a "200 OK" over HTTP.
	//
	// Negative values are not supported and will return `INVALID_ARGUMENT`.
	//
	// No more than 100 resources may be specified in a single request.
	ResourceRequests []*Resource `protobuf:"bytes,8,rep,name=resource_requests,json=resourceRequests,proto3" json:"resource_requests,omitempty"`
	// Key-value map of counter names and values for this Task.
	//
	// Note that these correspond to the *current* values of the counters,
	// regardless of how much progress was made since the last checkpoint.
	//
	// Negative values are not supported and will return `INVALID_ARGUMENT`.
	//
	// No more than 100 counters may be specified in a single request.
	Counters []*Counter `protobuf:"bytes,9,rep,name=counters,proto3" json:"counters,omitempty"`
	// Errors encountered during the job; one ErrorSummary per unique
	// ErrorSummary.error_code value.
	//
	// Note that this represents only the errors which have been encountered
	// by the calling worker since the last ReportTaskProgress call.
	//
	// No more than 100 error summaries may be specified in a single request.
	ErrorSummaries []*ErrorSummary `protobuf:"bytes,10,rep,name=error_summaries,json=errorSummaries,proto3" json:"error_summaries,omitempty"`
	// Only applicable if the task has failed during execution on the worker:
	// if true, this flag, determines whether or not the failure will be
	// considered retriable.
	//
	// A Task which repeatedly encounters retriable errors will be reassigned for
	// 10 attempts.
	EncounteredRetriableFailure bool `protobuf:"varint,11,opt,name=encountered_retriable_failure,json=encounteredRetriableFailure,proto3" json:"encountered_retriable_failure,omitempty"`
	// User-facing log entries to be propagated to the user-owned log bucket,
	// if specified.
	//
	// No more than 100 log entries may be specified in a single request.
	LogEntries []*LogEntry `protobuf:"bytes,12,rep,name=log_entries,json=logEntries,proto3" json:"log_entries,omitempty"`
	// New tasks to be added to this transfer operation. These will be persisted
	// by the service and assigned back to this worker pool in the future.
	//
	// No more than 1000 generated tasks may be specified in a single request.
	GeneratedTaskSpecs   []*TaskSpec `protobuf:"bytes,13,rep,name=generated_task_specs,json=generatedTaskSpecs,proto3" json:"generated_task_specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReportTaskProgressRequest) Reset()         { *m = ReportTaskProgressRequest{} }
func (m *ReportTaskProgressRequest) String() string { return proto.CompactTextString(m) }
func (*ReportTaskProgressRequest) ProtoMessage()    {}
func (*ReportTaskProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{2}
}

func (m *ReportTaskProgressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportTaskProgressRequest.Unmarshal(m, b)
}
func (m *ReportTaskProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportTaskProgressRequest.Marshal(b, m, deterministic)
}
func (m *ReportTaskProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportTaskProgressRequest.Merge(m, src)
}
func (m *ReportTaskProgressRequest) XXX_Size() int {
	return xxx_messageInfo_ReportTaskProgressRequest.Size(m)
}
func (m *ReportTaskProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportTaskProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportTaskProgressRequest proto.InternalMessageInfo

func (m *ReportTaskProgressRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReportTaskProgressRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ReportTaskProgressRequest) GetTransferOperationName() string {
	if m != nil {
		return m.TransferOperationName
	}
	return ""
}

func (m *ReportTaskProgressRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *ReportTaskProgressRequest) GetLeaseTokenId() string {
	if m != nil {
		return m.LeaseTokenId
	}
	return ""
}

func (m *ReportTaskProgressRequest) GetTaskStatus() TaskStatus {
	if m != nil {
		return m.TaskStatus
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (m *ReportTaskProgressRequest) GetUpdatedTaskSpec() *TaskSpec {
	if m != nil {
		return m.UpdatedTaskSpec
	}
	return nil
}

func (m *ReportTaskProgressRequest) GetResourceRequests() []*Resource {
	if m != nil {
		return m.ResourceRequests
	}
	return nil
}

func (m *ReportTaskProgressRequest) GetCounters() []*Counter {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *ReportTaskProgressRequest) GetErrorSummaries() []*ErrorSummary {
	if m != nil {
		return m.ErrorSummaries
	}
	return nil
}

func (m *ReportTaskProgressRequest) GetEncounteredRetriableFailure() bool {
	if m != nil {
		return m.EncounteredRetriableFailure
	}
	return false
}

func (m *ReportTaskProgressRequest) GetLogEntries() []*LogEntry {
	if m != nil {
		return m.LogEntries
	}
	return nil
}

func (m *ReportTaskProgressRequest) GetGeneratedTaskSpecs() []*TaskSpec {
	if m != nil {
		return m.GeneratedTaskSpecs
	}
	return nil
}

// Response returned by ReportTaskProgressRequest.
type ReportTaskProgressResponse struct {
	// Required. Unique identifier which will be modified by the service every
	// time a lease is granted in response to a successful ReportTaskProgress call
	// for a task which is still in progress on the calling worker.
	LeaseTokenId string `protobuf:"bytes,1,opt,name=lease_token_id,json=leaseTokenId,proto3" json:"lease_token_id,omitempty"`
	// True if and only if the task should be evicted from the current worker.
	//
	// Note that the HTTP response code can still be "200 OK" even if the task
	// is evicted, indicating that the progress reported in the request was
	// recorded successfully for the task.
	EvictTask bool `protobuf:"varint,2,opt,name=evict_task,json=evictTask,proto3" json:"evict_task,omitempty"`
	// Duration by which the task lease was extended.
	//
	// This value will not be specified if the task_status specified in the
	// request corresponds to a terminal state.
	NewTaskLeaseExpiration *duration.Duration `protobuf:"bytes,3,opt,name=new_task_lease_expiration,json=newTaskLeaseExpiration,proto3" json:"new_task_lease_expiration,omitempty"`
	// Resources granted to the Worker to perform this Task. Note that the values
	// specified may be smaller than those specified in the
	// [google.storagetransfer.v1.StorageTransferService.ReportTaskProgressRequest.resource_request][]
	// based on available resources, but every Resource from the request will
	// be represented in the response also with *some* value.
	//
	// The ordering of the keys in this field is not necessarily the same
	// as the ordering of the keys in the request.
	ResourceGrants       []*Resource `protobuf:"bytes,4,rep,name=resource_grants,json=resourceGrants,proto3" json:"resource_grants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReportTaskProgressResponse) Reset()         { *m = ReportTaskProgressResponse{} }
func (m *ReportTaskProgressResponse) String() string { return proto.CompactTextString(m) }
func (*ReportTaskProgressResponse) ProtoMessage()    {}
func (*ReportTaskProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{3}
}

func (m *ReportTaskProgressResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportTaskProgressResponse.Unmarshal(m, b)
}
func (m *ReportTaskProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportTaskProgressResponse.Marshal(b, m, deterministic)
}
func (m *ReportTaskProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportTaskProgressResponse.Merge(m, src)
}
func (m *ReportTaskProgressResponse) XXX_Size() int {
	return xxx_messageInfo_ReportTaskProgressResponse.Size(m)
}
func (m *ReportTaskProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportTaskProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportTaskProgressResponse proto.InternalMessageInfo

func (m *ReportTaskProgressResponse) GetLeaseTokenId() string {
	if m != nil {
		return m.LeaseTokenId
	}
	return ""
}

func (m *ReportTaskProgressResponse) GetEvictTask() bool {
	if m != nil {
		return m.EvictTask
	}
	return false
}

func (m *ReportTaskProgressResponse) GetNewTaskLeaseExpiration() *duration.Duration {
	if m != nil {
		return m.NewTaskLeaseExpiration
	}
	return nil
}

func (m *ReportTaskProgressResponse) GetResourceGrants() []*Resource {
	if m != nil {
		return m.ResourceGrants
	}
	return nil
}

// Contains log entry information for a task.
//
// Note that this feature is currently not implemented; once it is, the logged
// data will eventually (SLO TBD) be dumped into the user's GCS bucket.
type LogEntry struct {
	// Required. The ID of the Google Cloud Platform Console project that owns the
	// transfer operation.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Name of the transfer job with which this task is associated.
	TransferJobName string `protobuf:"bytes,2,opt,name=transfer_job_name,json=transferJobName,proto3" json:"transfer_job_name,omitempty"`
	// Required. Name of the transfer operation with which this task is
	// associated.
	TransferOperationName string `protobuf:"bytes,3,opt,name=transfer_operation_name,json=transferOperationName,proto3" json:"transfer_operation_name,omitempty"`
	// Required. Name of the task with which this task is associated.
	TaskName string `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// Timestamp at which the task was first created, from the persective of
	// Storage Transfer Service.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Current status of the task.
	CurrentStatus TaskStatus `protobuf:"varint,6,opt,name=current_status,json=currentStatus,proto3,enum=google.storagetransfer.v1.TaskStatus" json:"current_status,omitempty"`
	// Previous status of the task.
	PreviousStatus TaskStatus `protobuf:"varint,7,opt,name=previous_status,json=previousStatus,proto3,enum=google.storagetransfer.v1.TaskStatus" json:"previous_status,omitempty"`
	// Message which represents the ultimate reason for which this task failed
	// terminally (if applicable).
	//
	// The maximum length of this field is 1024 characters.
	FailureMessage string `protobuf:"bytes,8,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// Current values of counters associated with this specific task.
	// No more than 100 counters may be specified in a single log entry.
	Counters []*Counter `protobuf:"bytes,9,rep,name=counters,proto3" json:"counters,omitempty"`
	// Errors encountered during the task's execution; one ErrorSummary per unique
	// ErrorSummary.error_code value.
	ErrorSummaries       []*ErrorSummary `protobuf:"bytes,10,rep,name=error_summaries,json=errorSummaries,proto3" json:"error_summaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{4}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *LogEntry) GetTransferJobName() string {
	if m != nil {
		return m.TransferJobName
	}
	return ""
}

func (m *LogEntry) GetTransferOperationName() string {
	if m != nil {
		return m.TransferOperationName
	}
	return ""
}

func (m *LogEntry) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *LogEntry) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *LogEntry) GetCurrentStatus() TaskStatus {
	if m != nil {
		return m.CurrentStatus
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (m *LogEntry) GetPreviousStatus() TaskStatus {
	if m != nil {
		return m.PreviousStatus
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (m *LogEntry) GetFailureMessage() string {
	if m != nil {
		return m.FailureMessage
	}
	return ""
}

func (m *LogEntry) GetCounters() []*Counter {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *LogEntry) GetErrorSummaries() []*ErrorSummary {
	if m != nil {
		return m.ErrorSummaries
	}
	return nil
}

// Worker-specified task definition to be used when generating new tasks
// via the ReportTaskProgress API.
type TaskSpec struct {
	// The name which uniquely identifies this task within the scope of its
	// associated transfer operation. This value is generated by the service.
	//
	// Note that this field will be ignored if specified by workers when
	// generating new tasks or when updating the spec of a task for which this
	// worker currently holds the lease; it is only used for new task assignment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Task type which maps this task to a specific assignment queue.
	//
	// The maximum length of this field is 1024 characters.
	TaskType string `protobuf:"bytes,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	// Required. The ID of the Google Cloud Platform Console project that owns the
	// transfer operation.
	ProjectId string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Name of the transfer operation with which this task is
	// associated.
	TransferOperationName string `protobuf:"bytes,6,opt,name=transfer_operation_name,json=transferOperationName,proto3" json:"transfer_operation_name,omitempty"`
	// This is the lease token ID which should be specified in the
	// first ReportTaskProgressRequest sent by the worker for a newly-assigned
	// task. This value is generated by the service upon creation of new tasks
	// via the ReportTaskProgress API.
	//
	// Note that this field will be ignored if specified by workers when
	// generating new tasks or when updating the spec of a task for which this
	// worker currently holds the lease; it is only used for new task assignment.
	LeaseTokenId string `protobuf:"bytes,3,opt,name=lease_token_id,json=leaseTokenId,proto3" json:"lease_token_id,omitempty"`
	// Required. Properties of the task which will be used by workers to execute
	// it later. At least one TaskProperty must be specified for every task, and
	// no task may have more than 100 properties.
	//
	// For example, properties could include the name of a bucket and object,
	// precondition values (such as generation, metageneration, etc.), a maximum
	// number of retries allowed for this task, continuation tokens, etc. - in
	// short, any information which is needed for workers to perform this task.
	TaskProperties       []*TaskProperty `protobuf:"bytes,4,rep,name=task_properties,json=taskProperties,proto3" json:"task_properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TaskSpec) Reset()         { *m = TaskSpec{} }
func (m *TaskSpec) String() string { return proto.CompactTextString(m) }
func (*TaskSpec) ProtoMessage()    {}
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{5}
}

func (m *TaskSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskSpec.Unmarshal(m, b)
}
func (m *TaskSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskSpec.Marshal(b, m, deterministic)
}
func (m *TaskSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSpec.Merge(m, src)
}
func (m *TaskSpec) XXX_Size() int {
	return xxx_messageInfo_TaskSpec.Size(m)
}
func (m *TaskSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSpec proto.InternalMessageInfo

func (m *TaskSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskSpec) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *TaskSpec) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *TaskSpec) GetTransferOperationName() string {
	if m != nil {
		return m.TransferOperationName
	}
	return ""
}

func (m *TaskSpec) GetLeaseTokenId() string {
	if m != nil {
		return m.LeaseTokenId
	}
	return ""
}

func (m *TaskSpec) GetTaskProperties() []*TaskProperty {
	if m != nil {
		return m.TaskProperties
	}
	return nil
}

// Key-value pair of properties for a single task, corresponding to an
// arbitrary worker-specified unit of work.
type TaskProperty struct {
	// Required. Note: The maximum length of this field is 1024 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Note: The maximum length of this field is 1024 characters.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskProperty) Reset()         { *m = TaskProperty{} }
func (m *TaskProperty) String() string { return proto.CompactTextString(m) }
func (*TaskProperty) ProtoMessage()    {}
func (*TaskProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{6}
}

func (m *TaskProperty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskProperty.Unmarshal(m, b)
}
func (m *TaskProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskProperty.Marshal(b, m, deterministic)
}
func (m *TaskProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskProperty.Merge(m, src)
}
func (m *TaskProperty) XXX_Size() int {
	return xxx_messageInfo_TaskProperty.Size(m)
}
func (m *TaskProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskProperty.DiscardUnknown(m)
}

var xxx_messageInfo_TaskProperty proto.InternalMessageInfo

func (m *TaskProperty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskProperty) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Key-value pair of the resource type to be specified in
// ReportTaskProgressRequests, where the value represents the amount of that
// resource needed in order to perform the next unit of work (i.e., before
// calling the ReportTaskProgress API again).
type Resource struct {
	// Required. Client-specified name of resource.
	// Note: The maximum length of this field is 1024 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Quantity of specified resource.
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{7}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Key-value pair used to represent the current value of a counter corresponding
// to the given name.
type Counter struct {
	// Required. Client-specified counter name.
	// Note: The maximum length of this field is 1024 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Value associated with counter with respect to the current state
	// of a Task.
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Counter) Reset()         { *m = Counter{} }
func (m *Counter) String() string { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()    {}
func (*Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{8}
}

func (m *Counter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counter.Unmarshal(m, b)
}
func (m *Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counter.Marshal(b, m, deterministic)
}
func (m *Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counter.Merge(m, src)
}
func (m *Counter) XXX_Size() int {
	return xxx_messageInfo_Counter.Size(m)
}
func (m *Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_Counter proto.InternalMessageInfo

func (m *Counter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Counter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// An entry describing an error that has occurred.
type ErrorLogEntry struct {
	// A URL that refers to the target (a data source, a data sink,
	// or an object) with which the error is associated.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// A list of messages that carry the error details.
	ErrorDetails         []string `protobuf:"bytes,3,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorLogEntry) Reset()         { *m = ErrorLogEntry{} }
func (m *ErrorLogEntry) String() string { return proto.CompactTextString(m) }
func (*ErrorLogEntry) ProtoMessage()    {}
func (*ErrorLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{9}
}

func (m *ErrorLogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorLogEntry.Unmarshal(m, b)
}
func (m *ErrorLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorLogEntry.Marshal(b, m, deterministic)
}
func (m *ErrorLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorLogEntry.Merge(m, src)
}
func (m *ErrorLogEntry) XXX_Size() int {
	return xxx_messageInfo_ErrorLogEntry.Size(m)
}
func (m *ErrorLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorLogEntry proto.InternalMessageInfo

func (m *ErrorLogEntry) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ErrorLogEntry) GetErrorDetails() []string {
	if m != nil {
		return m.ErrorDetails
	}
	return nil
}

// A summary of errors by error code, plus a count and sample error log
// entries.
type ErrorSummary struct {
	ErrorCode code.Code `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=google.rpc.Code" json:"error_code,omitempty"`
	// Count of this type of error.
	ErrorCount int64 `protobuf:"varint,2,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// Error samples.
	ErrorLogEntries      []*ErrorLogEntry `protobuf:"bytes,3,rep,name=error_log_entries,json=errorLogEntries,proto3" json:"error_log_entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ErrorSummary) Reset()         { *m = ErrorSummary{} }
func (m *ErrorSummary) String() string { return proto.CompactTextString(m) }
func (*ErrorSummary) ProtoMessage()    {}
func (*ErrorSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{10}
}

func (m *ErrorSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorSummary.Unmarshal(m, b)
}
func (m *ErrorSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorSummary.Marshal(b, m, deterministic)
}
func (m *ErrorSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorSummary.Merge(m, src)
}
func (m *ErrorSummary) XXX_Size() int {
	return xxx_messageInfo_ErrorSummary.Size(m)
}
func (m *ErrorSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorSummary proto.InternalMessageInfo

func (m *ErrorSummary) GetErrorCode() code.Code {
	if m != nil {
		return m.ErrorCode
	}
	return code.Code_OK
}

func (m *ErrorSummary) GetErrorCount() int64 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *ErrorSummary) GetErrorLogEntries() []*ErrorLogEntry {
	if m != nil {
		return m.ErrorLogEntries
	}
	return nil
}

func init() {
	proto.RegisterEnum("google.storagetransfer.v1.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterType((*GetGoogleServiceAccountRequest)(nil), "google.storagetransfer.v1.GetGoogleServiceAccountRequest")
	proto.RegisterType((*GoogleServiceAccount)(nil), "google.storagetransfer.v1.GoogleServiceAccount")
	proto.RegisterType((*ReportTaskProgressRequest)(nil), "google.storagetransfer.v1.ReportTaskProgressRequest")
	proto.RegisterType((*ReportTaskProgressResponse)(nil), "google.storagetransfer.v1.ReportTaskProgressResponse")
	proto.RegisterType((*LogEntry)(nil), "google.storagetransfer.v1.LogEntry")
	proto.RegisterType((*TaskSpec)(nil), "google.storagetransfer.v1.TaskSpec")
	proto.RegisterType((*TaskProperty)(nil), "google.storagetransfer.v1.TaskProperty")
	proto.RegisterType((*Resource)(nil), "google.storagetransfer.v1.Resource")
	proto.RegisterType((*Counter)(nil), "google.storagetransfer.v1.Counter")
	proto.RegisterType((*ErrorLogEntry)(nil), "google.storagetransfer.v1.ErrorLogEntry")
	proto.RegisterType((*ErrorSummary)(nil), "google.storagetransfer.v1.ErrorSummary")
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor_96c3e6bcafb460d3) }

var fileDescriptor_96c3e6bcafb460d3 = []byte{
	// 1150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xae, 0xe3, 0x24, 0xb5, 0x8f, 0x13, 0xdb, 0x99, 0x37, 0x6d, 0x37, 0xae, 0xfa, 0x62, 0xb9,
	0xa0, 0x46, 0xbd, 0xb0, 0x85, 0x5b, 0x10, 0x55, 0x25, 0x50, 0x3e, 0x36, 0x91, 0xc1, 0xb5, 0xad,
	0xf5, 0xe6, 0x86, 0x9b, 0xd5, 0x78, 0x7d, 0xba, 0x6c, 0x63, 0xef, 0x2c, 0x33, 0xb3, 0x29, 0xb9,
	0x46, 0x08, 0xc4, 0x1f, 0x81, 0x5f, 0xc0, 0x35, 0x3f, 0x0d, 0xcd, 0xcc, 0xee, 0x26, 0x6a, 0x1c,
	0x9b, 0xc0, 0x0d, 0x77, 0xe3, 0x33, 0xe7, 0x79, 0x7c, 0xf6, 0x7c, 0x3c, 0x67, 0xa0, 0x2a, 0x39,
	0x8d, 0xc4, 0x5b, 0xe4, 0xed, 0x98, 0x33, 0xc9, 0xc8, 0x5e, 0xc0, 0x58, 0x30, 0xc3, 0xb6, 0x90,
	0x8c, 0xd3, 0x00, 0xf3, 0xdb, 0x8b, 0x4f, 0x1b, 0xaf, 0x82, 0x50, 0x7e, 0x97, 0x4c, 0xda, 0x3e,
	0x9b, 0x77, 0x02, 0x36, 0xa3, 0x51, 0xd0, 0xd1, 0x98, 0x49, 0xf2, 0xb6, 0x13, 0xcb, 0xcb, 0x18,
	0x45, 0x67, 0x9a, 0x70, 0x2a, 0x43, 0x16, 0xe5, 0x07, 0xc3, 0xda, 0x78, 0xbd, 0x1a, 0x2a, 0xc3,
	0x39, 0x0a, 0x49, 0xe7, 0xf1, 0xd5, 0x29, 0x05, 0x37, 0x4d, 0x48, 0x34, 0x0e, 0x45, 0xc7, 0x1c,
	0x3b, 0x3c, 0xf6, 0x3b, 0x3e, 0x9b, 0xa2, 0xf1, 0x68, 0x7d, 0x05, 0xff, 0x3f, 0x45, 0x79, 0xaa,
	0xef, 0xc6, 0xc8, 0x2f, 0x42, 0x1f, 0x0f, 0x7c, 0x9f, 0x25, 0x91, 0x74, 0xf0, 0xfb, 0x04, 0x85,
	0x24, 0x4f, 0x00, 0x62, 0xce, 0xde, 0xa1, 0x2f, 0xbd, 0x70, 0x6a, 0x15, 0x9a, 0x85, 0xfd, 0xb2,
	0x53, 0x4e, 0x2d, 0xbd, 0x69, 0xeb, 0x35, 0xec, 0x2e, 0x42, 0x93, 0xa7, 0xb0, 0x4d, 0xcd, 0xd1,
	0xc3, 0x39, 0x0d, 0x67, 0x29, 0x72, 0x2b, 0x35, 0xda, 0xca, 0xd6, 0xfa, 0x6d, 0x13, 0xf6, 0x1c,
	0x8c, 0x19, 0x97, 0x2e, 0x15, 0xe7, 0x23, 0xce, 0x02, 0x8e, 0x42, 0x64, 0xff, 0x4c, 0x60, 0x3d,
	0xa2, 0x73, 0x4c, 0x91, 0xfa, 0xfc, 0x41, 0x34, 0x6b, 0x1f, 0x44, 0x43, 0x3e, 0x87, 0x47, 0x59,
	0xde, 0x3d, 0x16, 0xa3, 0xc9, 0xa4, 0xa7, 0x59, 0x8a, 0xda, 0xf7, 0x41, 0x76, 0x3d, 0xcc, 0x6e,
	0x07, 0x8a, 0xf6, 0x31, 0x94, 0xdf, 0x33, 0x7e, 0x8e, 0x5c, 0xb1, 0xae, 0x6b, 0xcf, 0x92, 0x31,
	0xf4, 0xa6, 0xe4, 0x63, 0xa8, 0xce, 0x90, 0x0a, 0xf4, 0x24, 0x3b, 0xc7, 0x48, 0x79, 0x6c, 0x98,
	0x6f, 0xd1, 0x56, 0x57, 0x19, 0x7b, 0x53, 0x72, 0x02, 0x15, 0x49, 0xc5, 0xb9, 0x27, 0x24, 0x95,
	0x89, 0xb0, 0x36, 0x9b, 0x85, 0xfd, 0x6a, 0xf7, 0x93, 0xf6, 0xad, 0x4d, 0xd1, 0x56, 0x9f, 0x3c,
	0xd6, 0xce, 0x0e, 0xc8, 0xfc, 0x4c, 0x86, 0xb0, 0x93, 0xc4, 0x53, 0x2a, 0x71, 0xea, 0x19, 0xbe,
	0x18, 0x7d, 0xeb, 0x7e, 0xb3, 0xb0, 0x5f, 0xe9, 0x3e, 0x5d, 0xc5, 0x16, 0xa3, 0xef, 0xd4, 0x52,
	0x74, 0x66, 0x20, 0x23, 0xd8, 0xe1, 0x28, 0x58, 0xc2, 0x7d, 0xf4, 0xb8, 0x49, 0xad, 0xb0, 0x4a,
	0xcd, 0xe2, 0x0a, 0x42, 0x27, 0xc5, 0x38, 0xf5, 0x0c, 0x9d, 0xd6, 0x45, 0x90, 0x2f, 0xa1, 0xa4,
	0x8b, 0x88, 0x5c, 0x58, 0x65, 0x4d, 0xd4, 0x5a, 0x42, 0x74, 0x64, 0x5c, 0x9d, 0x1c, 0x43, 0x46,
	0x50, 0x43, 0xce, 0x19, 0xf7, 0x44, 0x32, 0x9f, 0x53, 0x1e, 0xa2, 0xb0, 0x40, 0xd3, 0x3c, 0x5b,
	0x42, 0x63, 0x2b, 0xc4, 0x58, 0x03, 0x2e, 0x9d, 0x2a, 0x5e, 0xfd, 0x0a, 0x51, 0x90, 0x43, 0x78,
	0x82, 0x51, 0xca, 0x8f, 0x53, 0x8f, 0xa3, 0xe4, 0x21, 0x9d, 0xcc, 0xd0, 0x7b, 0x4b, 0xc3, 0x59,
	0xc2, 0xd1, 0xaa, 0x34, 0x0b, 0xfb, 0x25, 0xe7, 0xf1, 0x35, 0x27, 0x27, 0xf3, 0x39, 0x31, 0x2e,
	0xe4, 0x18, 0x2a, 0x33, 0x16, 0x78, 0x18, 0x49, 0x1d, 0xd1, 0xd6, 0xca, 0x0c, 0xf5, 0x59, 0x60,
	0x47, 0x92, 0x5f, 0x3a, 0x30, 0x33, 0x27, 0x15, 0xc9, 0x19, 0xec, 0x06, 0x18, 0xa9, 0xde, 0xba,
	0x5e, 0x40, 0x61, 0x6d, 0xaf, 0xa4, 0xcb, 0x2b, 0x48, 0x72, 0x82, 0xcc, 0x24, 0x5a, 0x3f, 0xad,
	0x41, 0x63, 0xd1, 0xa4, 0x88, 0x98, 0x45, 0x02, 0x17, 0xb4, 0x68, 0x61, 0x41, 0x8b, 0x3e, 0x01,
	0xc0, 0x8b, 0xd0, 0x97, 0x3a, 0x2e, 0x3d, 0x3c, 0x25, 0xa7, 0xac, 0x2d, 0x8a, 0x94, 0xb8, 0xb0,
	0x17, 0xe1, 0x7b, 0x13, 0xb4, 0x61, 0xc3, 0x1f, 0xe2, 0xd0, 0x4c, 0x89, 0x1e, 0x9f, 0x4a, 0x77,
	0x2f, 0x8b, 0x3f, 0xd3, 0xa0, 0xf6, 0x71, 0x2a, 0x57, 0xce, 0xc3, 0x08, 0xdf, 0x2b, 0x9a, 0xbe,
	0x42, 0xda, 0x39, 0x90, 0xf4, 0xa1, 0x96, 0xb7, 0x5f, 0xc0, 0x69, 0x24, 0x85, 0xb5, 0xfe, 0xf7,
	0x9b, 0xaf, 0x9a, 0x61, 0x4f, 0x35, 0xb4, 0xf5, 0xe7, 0x3a, 0x94, 0xb2, 0xbc, 0xaf, 0x90, 0x26,
	0xf2, 0x1c, 0x76, 0x72, 0x31, 0x78, 0xc7, 0x26, 0x46, 0x06, 0x8c, 0x64, 0xd4, 0xb2, 0x8b, 0xaf,
	0xd9, 0x44, 0x0b, 0xc0, 0xbf, 0x10, 0x0e, 0x9d, 0x2f, 0xed, 0x99, 0x0a, 0x87, 0x32, 0xe8, 0xcb,
	0xd7, 0x50, 0xf1, 0x39, 0x52, 0x89, 0x9e, 0x12, 0x66, 0xad, 0x1a, 0x95, 0x6e, 0xe3, 0x46, 0x0a,
	0xdd, 0x4c, 0xb5, 0x1d, 0x30, 0xee, 0xca, 0x40, 0xfa, 0x50, 0xf5, 0x13, 0xce, 0x31, 0x92, 0xff,
	0x48, 0x52, 0xb6, 0x53, 0x70, 0xaa, 0x2a, 0x03, 0xa8, 0xc5, 0x1c, 0x2f, 0x42, 0x96, 0x88, 0x8c,
	0xee, 0xfe, 0x5d, 0xe8, 0xaa, 0x19, 0x3a, 0xe5, 0x7b, 0x06, 0xb5, 0x74, 0xb4, 0xbc, 0x39, 0x0a,
	0x41, 0x03, 0xb4, 0x4a, 0xfa, 0xeb, 0xab, 0xa9, 0xf9, 0x8d, 0xb1, 0xfe, 0xf7, 0xb4, 0xa2, 0xf5,
	0xeb, 0x1a, 0x94, 0x72, 0x71, 0x5c, 0xb4, 0x63, 0xb2, 0x9a, 0xaa, 0xed, 0x9a, 0xf6, 0x8b, 0xae,
	0xa9, 0x7b, 0x19, 0x7f, 0xb8, 0x80, 0x36, 0xee, 0xb0, 0x80, 0x36, 0x97, 0xf5, 0xd1, 0xcd, 0x01,
	0x2e, 0x2e, 0x18, 0xe0, 0x11, 0xd4, 0x74, 0x64, 0x31, 0x57, 0xdc, 0x52, 0x25, 0x63, 0x7d, 0x65,
	0x32, 0x52, 0xc1, 0x50, 0x80, 0x4b, 0xa7, 0x2a, 0xaf, 0x7e, 0xa9, 0x64, 0x7c, 0x01, 0x5b, 0xd7,
	0xef, 0x17, 0xe6, 0x63, 0x17, 0x36, 0x2e, 0xe8, 0x2c, 0xc9, 0x72, 0x61, 0x7e, 0xb4, 0x5e, 0x42,
	0x29, 0x9b, 0xd2, 0xd5, 0xa8, 0x62, 0x86, 0x7a, 0x01, 0xf7, 0xd3, 0x1a, 0xdf, 0x01, 0x74, 0x02,
	0xdb, 0xba, 0xa2, 0xf9, 0xe0, 0xd7, 0xa1, 0x98, 0xf0, 0xec, 0x49, 0xa1, 0x8e, 0xea, 0xb9, 0x61,
	0xda, 0x64, 0x8a, 0x92, 0x86, 0x33, 0x61, 0x15, 0x9b, 0x45, 0x95, 0x3e, 0x6d, 0x3c, 0x36, 0xb6,
	0xd6, 0x1f, 0x05, 0xd8, 0xba, 0xde, 0x1a, 0xa4, 0x03, 0x60, 0x50, 0xea, 0x45, 0xa4, 0xe9, 0xaa,
	0xdd, 0x7a, 0x96, 0x4a, 0x1e, 0xfb, 0xed, 0x23, 0x36, 0x45, 0xa7, 0xac, 0x7d, 0xd4, 0x91, 0x7c,
	0x04, 0x95, 0x0c, 0x90, 0x44, 0x32, 0x8d, 0x12, 0xd2, 0x7b, 0xf5, 0xec, 0x71, 0x61, 0xc7, 0x38,
	0x5c, 0x5f, 0x25, 0x45, 0x5d, 0xa3, 0xfd, 0x55, 0x0d, 0x9b, 0xef, 0x13, 0xd3, 0xf1, 0xfd, 0x7c,
	0xa9, 0x3c, 0xff, 0xa5, 0x00, 0x70, 0x35, 0x8c, 0xe4, 0x31, 0x3c, 0x72, 0x0f, 0xc6, 0xdf, 0x78,
	0x63, 0xf7, 0xc0, 0x3d, 0x1b, 0x7b, 0x67, 0x83, 0xf1, 0xc8, 0x3e, 0xea, 0x9d, 0xf4, 0xec, 0xe3,
	0xfa, 0x3d, 0x52, 0x83, 0x4a, 0x6f, 0xe0, 0x8d, 0x9c, 0xe1, 0xa9, 0x63, 0x8f, 0xc7, 0xf5, 0x02,
	0xd9, 0x86, 0xf2, 0xd1, 0xf0, 0xcd, 0xa8, 0x6f, 0xbb, 0xf6, 0x71, 0x7d, 0x8d, 0x3c, 0x80, 0x1d,
	0xc7, 0x76, 0x9d, 0xde, 0xc1, 0x61, 0xdf, 0xf6, 0x4e, 0x0e, 0x7a, 0xfd, 0x33, 0xc7, 0xae, 0x17,
	0x89, 0x05, 0xbb, 0x83, 0xe1, 0xe0, 0xe6, 0xcd, 0x3a, 0xd9, 0x82, 0xd2, 0xf0, 0x70, 0x3c, 0x54,
	0xf8, 0xfa, 0x46, 0xf7, 0xf7, 0x35, 0x78, 0x38, 0x36, 0x1f, 0xe0, 0xa6, 0x1f, 0x90, 0xbe, 0xfc,
	0xc8, 0x8f, 0x05, 0x20, 0x37, 0x77, 0x14, 0x79, 0xb9, 0x54, 0xe7, 0x6f, 0x79, 0xfc, 0x35, 0x3e,
	0xbb, 0x23, 0xca, 0x2c, 0xc2, 0xd6, 0x3d, 0xf2, 0x73, 0x01, 0x1e, 0xdd, 0xf2, 0xa4, 0x25, 0xaf,
	0x96, 0x90, 0x2e, 0x7f, 0x06, 0x37, 0x3a, 0xcb, 0xa0, 0x0b, 0x70, 0xad, 0x7b, 0x87, 0x0f, 0xbe,
	0xfd, 0x5f, 0xae, 0x05, 0x01, 0xf3, 0x62, 0xea, 0x9f, 0xd3, 0x00, 0x27, 0x9b, 0x5a, 0xf8, 0x5f,
	0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0x53, 0xdf, 0x0a, 0x6d, 0x40, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageTransferServiceClient is the client API for StorageTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageTransferServiceClient interface {
	// Reports progress for a specific task within a transfer operation.
	ReportTaskProgress(ctx context.Context, in *ReportTaskProgressRequest, opts ...grpc.CallOption) (*ReportTaskProgressResponse, error)
	GetGoogleServiceAccount(ctx context.Context, in *GetGoogleServiceAccountRequest, opts ...grpc.CallOption) (*GoogleServiceAccount, error)
}

type storageTransferServiceClient struct {
	cc *grpc.ClientConn
}

func NewStorageTransferServiceClient(cc *grpc.ClientConn) StorageTransferServiceClient {
	return &storageTransferServiceClient{cc}
}

func (c *storageTransferServiceClient) ReportTaskProgress(ctx context.Context, in *ReportTaskProgressRequest, opts ...grpc.CallOption) (*ReportTaskProgressResponse, error) {
	out := new(ReportTaskProgressResponse)
	err := c.cc.Invoke(ctx, "/google.storagetransfer.v1.StorageTransferService/ReportTaskProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageTransferServiceClient) GetGoogleServiceAccount(ctx context.Context, in *GetGoogleServiceAccountRequest, opts ...grpc.CallOption) (*GoogleServiceAccount, error) {
	out := new(GoogleServiceAccount)
	err := c.cc.Invoke(ctx, "/google.storagetransfer.v1.StorageTransferService/GetGoogleServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageTransferServiceServer is the server API for StorageTransferService service.
type StorageTransferServiceServer interface {
	// Reports progress for a specific task within a transfer operation.
	ReportTaskProgress(context.Context, *ReportTaskProgressRequest) (*ReportTaskProgressResponse, error)
	GetGoogleServiceAccount(context.Context, *GetGoogleServiceAccountRequest) (*GoogleServiceAccount, error)
}

func RegisterStorageTransferServiceServer(s *grpc.Server, srv StorageTransferServiceServer) {
	s.RegisterService(&_StorageTransferService_serviceDesc, srv)
}

func _StorageTransferService_ReportTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageTransferServiceServer).ReportTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.storagetransfer.v1.StorageTransferService/ReportTaskProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageTransferServiceServer).ReportTaskProgress(ctx, req.(*ReportTaskProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageTransferService_GetGoogleServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoogleServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageTransferServiceServer).GetGoogleServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.storagetransfer.v1.StorageTransferService/GetGoogleServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageTransferServiceServer).GetGoogleServiceAccount(ctx, req.(*GetGoogleServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.storagetransfer.v1.StorageTransferService",
	HandlerType: (*StorageTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportTaskProgress",
			Handler:    _StorageTransferService_ReportTaskProgress_Handler,
		},
		{
			MethodName: "GetGoogleServiceAccount",
			Handler:    _StorageTransferService_GetGoogleServiceAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
