// Code generated by MockGen. DO NOT EDIT.
// Source: listingresultreader.go

package dcp

import (
	gomock "github.com/golang/mock/gomock"
)

// MockListingResultReader is a mock of ListingResultReader interface
type MockListingResultReader struct {
	ctrl     *gomock.Controller
	recorder *MockListingResultReaderMockRecorder
}

// MockListingResultReaderMockRecorder is the mock recorder for MockListingResultReader
type MockListingResultReaderMockRecorder struct {
	mock *MockListingResultReader
}

// NewMockListingResultReader creates a new mock instance
func NewMockListingResultReader(ctrl *gomock.Controller) *MockListingResultReader {
	mock := &MockListingResultReader{ctrl: ctrl}
	mock.recorder = &MockListingResultReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockListingResultReader) EXPECT() *MockListingResultReaderMockRecorder {
	return _m.recorder
}

// ReadListResult mocks base method
func (_m *MockListingResultReader) ReadListResult(bucketName string, objectName string) (chan string, error) {
	ret := _m.ctrl.Call(_m, "ReadListResult", bucketName, objectName)
	ret0, _ := ret[0].(chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadListResult indicates an expected call of ReadListResult
func (_mr *MockListingResultReaderMockRecorder) ReadListResult(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadListResult", arg0, arg1)
}
