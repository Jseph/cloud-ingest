// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/tasks.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/tasks.proto

It has these top-level messages:
	TaskFailureType
	TaskStatus
	TaskType
	JobRunStatus
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Specifies the classes of failures that a task can have.
type TaskFailureType_Type int32

const (
	// Not used.
	TaskFailureType_UNUSED TaskFailureType_Type = 0
	// The failure type is not known / unrecognized.
	TaskFailureType_UNKNOWN TaskFailureType_Type = 1
	// The file was modified at source while being uploaded.
	TaskFailureType_FILE_MODIFIED_FAILURE TaskFailureType_Type = 2
	// File MD5 hash does not match GCS MD5 hash.
	TaskFailureType_MD5_MISMATCH_FAILURE TaskFailureType_Type = 3
	// GCS upload failed due to a precondition failure.
	TaskFailureType_PRECONDITION_FAILURE TaskFailureType_Type = 4
	// Agent asked to upload a file that does not exist.
	TaskFailureType_FILE_NOT_FOUND_FAILURE TaskFailureType_Type = 5
	// Agent does not have permissions for requested action.
	TaskFailureType_PERMISSION_FAILURE TaskFailureType_Type = 6
)

var TaskFailureType_Type_name = map[int32]string{
	0: "UNUSED",
	1: "UNKNOWN",
	2: "FILE_MODIFIED_FAILURE",
	3: "MD5_MISMATCH_FAILURE",
	4: "PRECONDITION_FAILURE",
	5: "FILE_NOT_FOUND_FAILURE",
	6: "PERMISSION_FAILURE",
}
var TaskFailureType_Type_value = map[string]int32{
	"UNUSED":                 0,
	"UNKNOWN":                1,
	"FILE_MODIFIED_FAILURE":  2,
	"MD5_MISMATCH_FAILURE":   3,
	"PRECONDITION_FAILURE":   4,
	"FILE_NOT_FOUND_FAILURE": 5,
	"PERMISSION_FAILURE":     6,
}

func (x TaskFailureType_Type) String() string {
	return proto1.EnumName(TaskFailureType_Type_name, int32(x))
}
func (TaskFailureType_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Specifies the current status of the cloud ingest task.
type TaskStatus_Type int32

const (
	// The task is unqueued waiting to be queued by the dcp.
	TaskStatus_UNQUEUED TaskStatus_Type = 0
	// The task is in process.
	TaskStatus_QUEUED TaskStatus_Type = 1
	// The task was completed but failed.
	TaskStatus_FAILED TaskStatus_Type = 2
	// The task was completed and succeeded.
	TaskStatus_SUCCESS TaskStatus_Type = 3
)

var TaskStatus_Type_name = map[int32]string{
	0: "UNQUEUED",
	1: "QUEUED",
	2: "FAILED",
	3: "SUCCESS",
}
var TaskStatus_Type_value = map[string]int32{
	"UNQUEUED": 0,
	"QUEUED":   1,
	"FAILED":   2,
	"SUCCESS":  3,
}

func (x TaskStatus_Type) String() string {
	return proto1.EnumName(TaskStatus_Type_name, int32(x))
}
func (TaskStatus_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// Specifies the task operation that a task performs.
type TaskType_Type int32

const (
	// Unknown task type.
	TaskType_UNKNOWN TaskType_Type = 0
	// List task. A task that lists the files on the on-premises directory.
	TaskType_LIST TaskType_Type = 1
	// Upload to GCS task. Upload a file from the on-premises directory to GCS.
	TaskType_UPLOAD_GCS TaskType_Type = 2
)

var TaskType_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "LIST",
	2: "UPLOAD_GCS",
}
var TaskType_Type_value = map[string]int32{
	"UNKNOWN":    0,
	"LIST":       1,
	"UPLOAD_GCS": 2,
}

func (x TaskType_Type) String() string {
	return proto1.EnumName(TaskType_Type_name, int32(x))
}
func (TaskType_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Specifies the type of the Job Run status.
type JobRunStatus_Type int32

const (
	// Indicates that a job hasn't been started.
	JobRunStatus_NOT_STARTED JobRunStatus_Type = 0
	// Indicates that the job has been started and is in progress.
	JobRunStatus_IN_PROGRESS JobRunStatus_Type = 1
	// Indicates that the job has completed but it failed.
	JobRunStatus_FAILED JobRunStatus_Type = 2
	// Indicates that the job has completed and it succeeded.
	JobRunStatus_SUCCESS JobRunStatus_Type = 3
)

var JobRunStatus_Type_name = map[int32]string{
	0: "NOT_STARTED",
	1: "IN_PROGRESS",
	2: "FAILED",
	3: "SUCCESS",
}
var JobRunStatus_Type_value = map[string]int32{
	"NOT_STARTED": 0,
	"IN_PROGRESS": 1,
	"FAILED":      2,
	"SUCCESS":     3,
}

func (x JobRunStatus_Type) String() string {
	return proto1.EnumName(JobRunStatus_Type_name, int32(x))
}
func (JobRunStatus_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// Message to wrap the task failure type. This is needed to create a scope that does
// not conflict with other enums in this file.
type TaskFailureType struct {
}

func (m *TaskFailureType) Reset()                    { *m = TaskFailureType{} }
func (m *TaskFailureType) String() string            { return proto1.CompactTextString(m) }
func (*TaskFailureType) ProtoMessage()               {}
func (*TaskFailureType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Message to wrap the task status. This is needed to create a scope that does
// not conflict with other enums in this file.
type TaskStatus struct {
}

func (m *TaskStatus) Reset()                    { *m = TaskStatus{} }
func (m *TaskStatus) String() string            { return proto1.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()               {}
func (*TaskStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Message to wrap the task type. This is needed to create a scope that does
// not conflict with other enums in this file.
type TaskType struct {
}

func (m *TaskType) Reset()                    { *m = TaskType{} }
func (m *TaskType) String() string            { return proto1.CompactTextString(m) }
func (*TaskType) ProtoMessage()               {}
func (*TaskType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Message to wrap the Job Status type. This is needed to create a scope that
// does not conflict with other enums in this file.
type JobRunStatus struct {
}

func (m *JobRunStatus) Reset()                    { *m = JobRunStatus{} }
func (m *JobRunStatus) String() string            { return proto1.CompactTextString(m) }
func (*JobRunStatus) ProtoMessage()               {}
func (*JobRunStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*TaskFailureType)(nil), "TaskFailureType")
	proto1.RegisterType((*TaskStatus)(nil), "TaskStatus")
	proto1.RegisterType((*TaskType)(nil), "TaskType")
	proto1.RegisterType((*JobRunStatus)(nil), "JobRunStatus")
	proto1.RegisterEnum("TaskFailureType_Type", TaskFailureType_Type_name, TaskFailureType_Type_value)
	proto1.RegisterEnum("TaskStatus_Type", TaskStatus_Type_name, TaskStatus_Type_value)
	proto1.RegisterEnum("TaskType_Type", TaskType_Type_name, TaskType_Type_value)
	proto1.RegisterEnum("JobRunStatus_Type", JobRunStatus_Type_name, JobRunStatus_Type_value)
}

func init() { proto1.RegisterFile("proto/tasks.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x18, 0x85, 0x9b, 0xfe, 0xa4, 0xd5, 0xdb, 0xea, 0xab, 0x3f, 0x0b, 0x2a, 0x60, 0xf4, 0x0e, 0x0c,
	0x88, 0xa1, 0x63, 0x88, 0x9d, 0x62, 0x48, 0xec, 0xd4, 0x3f, 0x42, 0x62, 0xb1, 0x52, 0xa9, 0x03,
	0x2a, 0xa2, 0x55, 0x93, 0x0e, 0xdc, 0x0e, 0x17, 0xc1, 0xf5, 0x21, 0x5b, 0x51, 0xe9, 0xc2, 0xe4,
	0x23, 0x1d, 0x9d, 0xe3, 0xe7, 0xe8, 0x85, 0xff, 0xbb, 0xfd, 0xb6, 0xd9, 0xde, 0x36, 0x55, 0xbd,
	0xa9, 0x6f, 0x82, 0x26, 0xdf, 0x11, 0x4c, 0x4d, 0x55, 0x6f, 0xb2, 0xea, 0xed, 0xfd, 0xb0, 0x5f,
	0x9b, 0xcf, 0xdd, 0x9a, 0x7c, 0x45, 0xd0, 0xf7, 0x02, 0x03, 0xc4, 0x56, 0x58, 0xcd, 0x28, 0xea,
	0xe0, 0x31, 0x0c, 0xad, 0x78, 0x16, 0xf2, 0x45, 0xa0, 0x08, 0x5f, 0xc2, 0x79, 0xc6, 0x73, 0xe6,
	0x0a, 0x49, 0x79, 0xc6, 0x19, 0x75, 0x59, 0xc2, 0x73, 0xab, 0x18, 0xea, 0xe2, 0x0b, 0x38, 0x2b,
	0xe8, 0xbd, 0x2b, 0xb8, 0x2e, 0x12, 0x93, 0x3e, 0x1e, 0x9d, 0x9e, 0x77, 0x4a, 0xc5, 0x52, 0x29,
	0x28, 0x37, 0x5c, 0x8a, 0xa3, 0xd3, 0xc7, 0x57, 0x30, 0x0b, 0x75, 0x42, 0x1a, 0x97, 0x49, 0x2b,
	0x7e, 0xfb, 0x06, 0x78, 0x06, 0xb8, 0x64, 0xaa, 0xe0, 0x5a, 0x9f, 0x66, 0x62, 0xb2, 0x00, 0xf0,
	0xdc, 0xba, 0xa9, 0x9a, 0x43, 0x4d, 0xe6, 0x2d, 0xf1, 0x04, 0x46, 0x56, 0x2c, 0x2d, 0xb3, 0x81,
	0x19, 0x20, 0x6e, 0x75, 0xe4, 0xb5, 0x0f, 0x33, 0x8a, 0xba, 0x7e, 0x8b, 0xb6, 0x69, 0xca, 0xb4,
	0x46, 0x3d, 0x32, 0x87, 0x91, 0x2f, 0x0a, 0xcb, 0xaf, 0xdb, 0x9a, 0x93, 0xb1, 0x1d, 0x3c, 0x82,
	0x7e, 0xce, 0xb5, 0x41, 0x11, 0xfe, 0x07, 0x60, 0xcb, 0x5c, 0x26, 0xd4, 0x2d, 0x52, 0x8d, 0xba,
	0x64, 0x09, 0x93, 0xa7, 0xed, 0x4a, 0x1d, 0x3e, 0x5a, 0x8a, 0xa4, 0x8d, 0x4f, 0x61, 0xec, 0xa7,
	0x68, 0x93, 0x28, 0x13, 0x40, 0xa6, 0x30, 0xe6, 0xc2, 0x95, 0x4a, 0x2e, 0x94, 0xff, 0xf4, 0x6f,
	0x9a, 0x87, 0xe1, 0xeb, 0x20, 0x1c, 0x66, 0x15, 0x87, 0xe7, 0xee, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xa3, 0xfe, 0x7a, 0xa3, 0xb4, 0x01, 0x00, 0x00,
}
