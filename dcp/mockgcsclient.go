// Code generated by MockGen. DO NOT EDIT.
// Source: gcsclient.go

// Package dcp is a generated GoMock package.
package dcp

import (
	storage "cloud.google.com/go/storage"
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockGCS is a mock of GCS interface
type MockGCS struct {
	ctrl     *gomock.Controller
	recorder *MockGCSMockRecorder
}

// MockGCSMockRecorder is the mock recorder for MockGCS
type MockGCSMockRecorder struct {
	mock *MockGCS
}

// NewMockGCS creates a new mock instance
func NewMockGCS(ctrl *gomock.Controller) *MockGCS {
	mock := &MockGCS{ctrl: ctrl}
	mock.recorder = &MockGCSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGCS) EXPECT() *MockGCSMockRecorder {
	return m.recorder
}

// GetAttrs mocks base method
func (m *MockGCS) GetAttrs(ctx context.Context, bucketName, objectName string) (*storage.ObjectAttrs, error) {
	ret := m.ctrl.Call(m, "GetAttrs", ctx, bucketName, objectName)
	ret0, _ := ret[0].(*storage.ObjectAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttrs indicates an expected call of GetAttrs
func (mr *MockGCSMockRecorder) GetAttrs(ctx, bucketName, objectName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttrs", reflect.TypeOf((*MockGCS)(nil).GetAttrs), ctx, bucketName, objectName)
}

// NewReader mocks base method
func (m *MockGCS) NewReader(ctx context.Context, bucketName, objectName string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "NewReader", ctx, bucketName, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader
func (mr *MockGCSMockRecorder) NewReader(ctx, bucketName, objectName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockGCS)(nil).NewReader), ctx, bucketName, objectName)
}

// NewWriter mocks base method
func (m *MockGCS) NewWriter(ctx context.Context, bucketName, objectName string) io.WriteCloser {
	ret := m.ctrl.Call(m, "NewWriter", ctx, bucketName, objectName)
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// NewWriter indicates an expected call of NewWriter
func (mr *MockGCSMockRecorder) NewWriter(ctx, bucketName, objectName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockGCS)(nil).NewWriter), ctx, bucketName, objectName)
}
