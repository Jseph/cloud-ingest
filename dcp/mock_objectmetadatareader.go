// Code generated by MockGen. DO NOT EDIT.
// Source: dcp/objectmetadatareader.go

// Package dcp is a generated GoMock package.
package dcp

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockObjectMetadataReader is a mock of ObjectMetadataReader interface
type MockObjectMetadataReader struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMetadataReaderMockRecorder
}

// MockObjectMetadataReaderMockRecorder is the mock recorder for MockObjectMetadataReader
type MockObjectMetadataReaderMockRecorder struct {
	mock *MockObjectMetadataReader
}

// NewMockObjectMetadataReader creates a new mock instance
func NewMockObjectMetadataReader(ctrl *gomock.Controller) *MockObjectMetadataReader {
	mock := &MockObjectMetadataReader{ctrl: ctrl}
	mock.recorder = &MockObjectMetadataReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectMetadataReader) EXPECT() *MockObjectMetadataReaderMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockObjectMetadataReader) GetMetadata(ctx context.Context, bucketName, objectName string) (*ObjectMetadata, error) {
	ret := m.ctrl.Call(m, "GetMetadata", ctx, bucketName, objectName)
	ret0, _ := ret[0].(*ObjectMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockObjectMetadataReaderMockRecorder) GetMetadata(ctx, bucketName, objectName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockObjectMetadataReader)(nil).GetMetadata), ctx, bucketName, objectName)
}
